require('dotenv').config();
const { Client, GatewayIntentBits, Collection, Events, ActionRowBuilder, ButtonBuilder, ButtonStyle, SlashCommandBuilder } = require('discord.js');
const cron = require('node-cron');

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages] });
const TOKEN = process.env.BOT_TOKEN;

const scheduledForms = new Map();      // id: { task, data }
const scheduledMessages = new Map();   // id: { task, data }

client.commands = new Collection();

client.once(Events.ClientReady, () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}`);
});

// –ö–Ω–æ–ø–∫–∞ —Ñ–æ—Ä–º—ã
client.on(Events.InteractionCreate, async interaction => {
  if (interaction.isButton() && interaction.customId === 'form_button') {
    await interaction.reply({ content: `${interaction.user} –∑–∞–ø–∏—Å–∞–ª—Å—è(–ª–∞—Å—å)!`, ephemeral: true });
    await interaction.channel.send(`${interaction.user} –ø–æ–µ–¥–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.`);
  }
});

// Slash –∫–æ–º–∞–Ω–¥—ã
client.on(Events.InteractionCreate, async interaction => {
  if (!interaction.isChatInputCommand()) return;

  const cmd = interaction.commandName;

  if (cmd === '—Ñ–æ—Ä–º–∞') {
    const title = interaction.options.getString('—Ç–µ–∫—Å—Ç');
    const label = interaction.options.getString('—Ç–µ–∫—Å—Ç_–∫–Ω–æ–ø–∫–∏');
    const time = interaction.options.getString('–≤—Ä–µ–º—è');
    const freq = interaction.options.getString('–ø–æ–≤—Ç–æ—Ä');

    const [h, m] = time.split(':');
    const cronTime = `${m} ${h} * * *`;
    const id = Date.now().toString();

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder().setCustomId('form_button').setLabel(label).setStyle(ButtonStyle.Primary)
    );

    const task = cron.schedule(cronTime, async () => {
      await interaction.channel.send({ content: title, components: [row] });
      if (freq === 'once') {
        task.stop();
        scheduledForms.delete(id);
      }
    }, { timezone: 'Europe/Moscow' });

    scheduledForms.set(id, { task, title, label, time, freq });
    await interaction.reply({ content: `‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞. ID: ${id}`, ephemeral: true });
  }

  if (cmd === '—Ç–µ–∫—Å—Ç') {
    const text = interaction.options.getString('—Ç–µ–∫—Å—Ç');
    const time = interaction.options.getString('–≤—Ä–µ–º—è');
    const freq = interaction.options.getString('–ø–æ–≤—Ç–æ—Ä');

    const [h, m] = time.split(':');
    const cronTime = `${m} ${h} * * *`;
    const id = Date.now().toString();

    const task = cron.schedule(cronTime, async () => {
      await interaction.channel.send(text);
      if (freq === 'once') {
        task.stop();
        scheduledMessages.delete(id);
      }
    }, { timezone: 'Europe/Moscow' });

    scheduledMessages.set(id, { task, text, time, freq });
    await interaction.reply({ content: `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ. ID: ${id}`, ephemeral: true });
  }

  if (cmd === '—Ñ–æ—Ä–º–∞—Å–ø–∏—Å–æ–∫') {
    if (scheduledForms.size === 0) return interaction.reply({ content: '‚ùå –§–æ—Ä–º –Ω–µ—Ç.', ephemeral: true });
    const out = Array.from(scheduledForms.entries()).map(([id, f]) =>
      `üÜî ${id} | –í—Ä–µ–º—è: ${f.time} | –ü–æ–≤—Ç–æ—Ä: ${f.freq}`).join('\n');
    await interaction.reply({ content: out, ephemeral: true });
  }

  if (cmd === '—Ç–µ–∫—Å—Ç—Å–ø–∏—Å–æ–∫') {
    if (scheduledMessages.size === 0) return interaction.reply({ content: '‚ùå –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.', ephemeral: true });
    const out = Array.from(scheduledMessages.entries()).map(([id, m]) =>
      `üÜî ${id} | –í—Ä–µ–º—è: ${m.time} | –ü–æ–≤—Ç–æ—Ä: ${m.freq}`).join('\n');
    await interaction.reply({ content: out, ephemeral: true });
  }

  if (cmd === '—Ñ–æ—Ä–º–∞dell') {
    const id = interaction.options.getString('id');
    const form = scheduledForms.get(id);
    if (!form) return interaction.reply({ content: '‚ùå –§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', ephemeral: true });
    form.task.stop();
    scheduledForms.delete(id);
    await interaction.reply({ content: `‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Ñ–æ—Ä–º–∞ ID ${id}`, ephemeral: true });
  }

  if (cmd === '—Ñ–æ—Ä–º–∞alldell') {
    scheduledForms.forEach(f => f.task.stop());
    scheduledForms.clear();
    await interaction.reply({ content: '‚úÖ –í—Å–µ —Ñ–æ—Ä–º—ã —É–¥–∞–ª–µ–Ω—ã.', ephemeral: true });
  }

  if (cmd === '—Ç–µ–∫—Å—Çdell') {
    const id = interaction.options.getString('id');
    const msg = scheduledMessages.get(id);
    if (!msg) return interaction.reply({ content: '‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', ephemeral: true });
    msg.task.stop();
    scheduledMessages.delete(id);
    await interaction.reply({ content: `‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID ${id}`, ephemeral: true });
  }

  if (cmd === '—Ç–µ–∫—Å—Çalldell') {
    scheduledMessages.forEach(m => m.task.stop());
    scheduledMessages.clear();
    await interaction.reply({ content: '‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.', ephemeral: true });
  }

  if (cmd === '—Ñ–æ—Ä–º–∞—Å—Ä–∞–∑—É') {
    const title = interaction.options.getString('—Ç–µ–∫—Å—Ç');
    const label = interaction.options.getString('—Ç–µ–∫—Å—Ç_–∫–Ω–æ–ø–∫–∏');
    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder().setCustomId('form_button').setLabel(label).setStyle(ButtonStyle.Primary)
    );
    await interaction.channel.send({ content: title, components: [row] });
    await interaction.reply({ content: '‚úÖ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.', ephemeral: true });
  }

  if (cmd === '—Ç–µ–∫—Å—Ç—Å—Ä–∞–∑—É') {
    const text = interaction.options.getString('—Ç–µ–∫—Å—Ç');
    await interaction.channel.send(text);
    await interaction.reply({ content: '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.', ephemeral: true });
  }
});

client.login(TOKEN);
