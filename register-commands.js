require('dotenv').config();
const { REST, Routes, SlashCommandBuilder } = require('discord.js');

const TOKEN = process.env.BOT_TOKEN;
const CLIENT_ID = process.env.CLIENT_ID;
const GUILD_ID = process.env.GUILD_ID;


// –ú–∞—Å—Å–∏–≤ –∫–æ–º–∞–Ω–¥
const commands = [
  new SlashCommandBuilder()
    .setName('—Ñ–æ—Ä–º–∞')
    .setDescription('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É —Å –∫–Ω–æ–ø–∫–æ–π')
    .addStringOption(option =>
      option.setName('—Ç–µ–∫—Å—Ç').setDescription('–¢–µ–∫—Å—Ç —Ñ–æ—Ä–º—ã').setRequired(true))
    .addStringOption(option =>
      option.setName('—Ç–µ–∫—Å—Ç_–∫–Ω–æ–ø–∫–∏').setDescription('–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏').setRequired(true))
    .addStringOption(option =>
      option.setName('–≤—Ä–µ–º—è').setDescription('–í—Ä–µ–º—è (HH:MM)').setRequired(true))
    .addStringOption(option =>
      option.setName('–ø–æ–≤—Ç–æ—Ä')
        .setDescription('–û–¥–∏–Ω —Ä–∞–∑ –∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ')
        .setRequired(true)
        .addChoices(
          { name: '–û–¥–∏–Ω —Ä–∞–∑', value: 'once' },
          { name: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ', value: 'daily' },
        )),

  new SlashCommandBuilder()
    .setName('—Ñ–æ—Ä–º–∞dell')
    .setDescription('–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ä–º—É –ø–æ ID')
    .addStringOption(option =>
      option.setName('id').setDescription('ID —Ñ–æ—Ä–º—ã').setRequired(true)),

  new SlashCommandBuilder()
    .setName('—Ñ–æ—Ä–º–∞alldell')
    .setDescription('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ—Ä–º—ã'),

  new SlashCommandBuilder()
    .setName('—Ñ–æ—Ä–º–∞—Å–ø–∏—Å–æ–∫')
    .setDescription('–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º'),

  new SlashCommandBuilder()
    .setName('—Ñ–æ—Ä–º–∞—Å—Ä–∞–∑—É')
    .setDescription('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É —Å—Ä–∞–∑—É')
    .addStringOption(option =>
      option.setName('—Ç–µ–∫—Å—Ç').setDescription('–¢–µ–∫—Å—Ç —Ñ–æ—Ä–º—ã').setRequired(true))
    .addStringOption(option =>
      option.setName('—Ç–µ–∫—Å—Ç_–∫–Ω–æ–ø–∫–∏').setDescription('–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏').setRequired(true)),

  new SlashCommandBuilder()
    .setName('—Ç–µ–∫—Å—Ç')
    .setDescription('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    .addStringOption(option =>
      option.setName('—Ç–µ–∫—Å—Ç').setDescription('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è').setRequired(true))
    .addStringOption(option =>
      option.setName('–≤—Ä–µ–º—è').setDescription('–í—Ä–µ–º—è (HH:MM)').setRequired(true))
    .addStringOption(option =>
      option.setName('–ø–æ–≤—Ç–æ—Ä')
        .setDescription('–û–¥–∏–Ω —Ä–∞–∑ –∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ')
        .setRequired(true)
        .addChoices(
          { name: '–û–¥–∏–Ω —Ä–∞–∑', value: 'once' },
          { name: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ', value: 'daily' },
        )),

  new SlashCommandBuilder()
    .setName('—Ç–µ–∫—Å—Çdell')
    .setDescription('–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID')
    .addStringOption(option =>
      option.setName('id').setDescription('ID —Å–æ–æ–±—â–µ–Ω–∏—è').setRequired(true)),

  new SlashCommandBuilder()
    .setName('—Ç–µ–∫—Å—Çalldell')
    .setDescription('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'),

  new SlashCommandBuilder()
    .setName('—Ç–µ–∫—Å—Ç—Å–ø–∏—Å–æ–∫')
    .setDescription('–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'),

  new SlashCommandBuilder()
    .setName('—Ç–µ–∫—Å—Ç—Å—Ä–∞–∑—É')
    .setDescription('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É')
    .addStringOption(option =>
      option.setName('—Ç–µ–∫—Å—Ç').setDescription('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è').setRequired(true)),

].map(cmd => cmd.toJSON());

const rest = new REST({ version: '10' }).setToken(TOKEN);

(async () => {
  try {
console.log('–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥...');
    await rest.put(
      Routes.applicationCommands(CLIENT_ID),
      { body: [] } // –£–¥–∞–ª—è–µ–º –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    );
    console.log('–°—Ç–∞—Ä—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω—ã.');
    console.log('üì§ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã...');
    await rest.put(
  Routes.applicationCommands(CLIENT_ID),
  { body: commands }
);
    console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
  }
})();
